version: "3.10"

services:
  arlina-api:
    hostname: arlina-api
    container_name: arlina-api
    image: arlinadocker/api:latest-native
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - QUARKUS_HTTP_CORS_ORIGINS=${CORS_ORIGINS}
      - QUARKUS_DATASOURCE_USERNAME=${MYSQL_USER}
      - QUARKUS_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:mysql://mysqldb:3306/${MYSQL_DATABASE}
      - MP_JWT_VERIFY_PUBLICKEY_LOCATION=/jwt/publicKey.pem
      - QUARKUS_MINIO_ARLINA_URL=${MINIO_ARLINA_URL}
      - QUARKUS_MINIO_ARLINA_ACCESS_KEY=${MINIO_ARLINA_ACCESS_KEY}
      - QUARKUS_MINIO_ARLINA_SECRET_KEY=${MINIO_ARLINA_SECRET_KEY}
      - QUARKUS_CONTAINER_IMAGE_TAG=${IMAGE_VERSION}
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ./jwt:/jwt
    networks:
      - arlinamp
    healthcheck:
      test: ["CMD", "curl", "http://arlina-api:${API_PORT}/q/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      mysqldb: 
        condition: service_healthy

  arlina-jwt:
    hostname: arlina-jwt
    container_name: arlina-jwt
    image: arlinadocker/auth-jwt:latest-native
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - QUARKUS_HTTP_CORS_ORIGINS=${CORS_ORIGINS}
      - QUARKUS_DATASOURCE_USERNAME=${MYSQL_USER}
      - QUARKUS_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:mysql://mysqldb:3306/${MYSQL_DATABASE}
      - SMALLRYE_JWT_SIGN_KEY_LOCATION=/jwt/privateKey.pem
      - MP_JWT_VERIFY_PUBLICKEY_LOCATION=/jwt/publicKey.pem
      - DATA_COMPANY_EMAIL=${DATA_COMPANY_EMAIL}
      - DATA_DUMMY_PASSWORD=${DATA_DUMMY_PASSWORD}
      - QUARKUS_CONTAINER_IMAGE_TAG=${IMAGE_VERSION}
    ports:
      - "${JWT_PORT}:${JWT_PORT}"
    volumes:
      - ./jwt:/jwt
    networks:
      - arlinamp
    healthcheck:
      test: ["CMD", "curl", "http://arlina-jwt:${JWT_PORT}/q/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      mysqldb: 
        condition: service_healthy

  arlina-admin:
    container_name: arlina-admin
    hostname: arlina-admin
    image: arlinadocker/arlina-admin:latest
    restart: unless-stopped
    environment:
      - WDS_SOCKET_PORT=0
      - DEV=1
    env_file:
      - .env
    ports:
      - ${REACT_APP_WEB_ADMIN_PORT}:80
    networks:
      - arlinamp

  arlina-user:
    container_name: arlina-user
    hostname: arlina-user
    image: arlinadocker/arlina-user:latest
    restart: unless-stopped
    environment:
      - WDS_SOCKET_PORT=0
    env_file:
      - .env
    ports:
      - ${REACT_APP_WEB_USER_PORT}:80
    networks:
      - arlinamp

  mysqldb:
    hostname: mysqldb
    container_name: mysqldb
    image: mysql:8.0
    restart: unless-stopped
    environment:
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    expose:
      - ${MYSQL_PORT}
    volumes:
      - mysqldb-data:/var/lib/mysql
      - ./mysql/arlinadb-schema.sql:/docker-entrypoint-initdb.d/arlinadb-schema.sql
    networks:
      - arlinamp
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 10

  arlina-minio:
    hostname: arlina-minio
    container_name: arlina-minio
    image: quay.io/minio/minio:RELEASE.2023-07-07T07-13-57Z
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${MINIO_BUCKETS}
      - MINIO_SERVER_URL=http://localhost:${MINIO_PORTAL_PORT}
      - MINIO_BROWSER_REDIRECT_URL=http://${MINIO_DNS_NAME}/console
    ports:
      - ${MINIO_PORTAL_PORT}:9000
      - ${MINIO_CONSOLE_PORT}:9001
    volumes:
      - minio-data:/data
      - ./minio:/scripts
    command: server /data --console-address ':9001'
    networks:
      - arlinamp

  arlina-nginx:
    container_name: arlina-nginx
    hostname: arlina-nginx
    image: nginx:1.25-alpine
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
    ports:
      - ${NGINX_PORT}:80
      - 443:443
    networks:
      - arlinamp
    depends_on:
      arlina-api:
        condition: service_healthy
      arlina-jwt:
        condition: service_healthy
      arlina-admin:
        condition: service_started
      arlina-user:
        condition: service_started

volumes:
  mysqldb-data:
  minio-data:

networks:
  arlinamp:
    driver: bridge
